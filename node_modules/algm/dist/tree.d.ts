import { TreeNode } from './treeNode';
/**
 * The traversalFn will be executed in post-order
 * @param root
 * @param traversalFn
 * @category tree traversal
 * @mermaid
 *  flowchart TD
 *    B-->A
 *    B-->D
 *    D-->C
 * 	  D-->E
 * @example
 * ```js
 * postorder(root,(node,fatherNode)=>{console.log(node)})
 * // => A C E D B
 * ```
 */
export declare function postorder<T>(root: TreeNode<T>, fn1: (node: TreeNode<T>) => any): void;
/**
 * The traversalFn will be executed in in-order
 * @param root
 * @param traversalFn
 * @category tree traversal
 * @mermaid
 *  flowchart TD
 *    B-->A
 *    B-->D
 *    D-->C
 * 	  D-->E
 * @example
 * ```js
 * inorder(root,(node,fatherNode)=>{console.log(node)})
 * // => A B C D E
 * ```
 */
export declare function inorder<T>(root: TreeNode<T>, fn1: (node: TreeNode<T>) => any): void;
/**
 * The traversalFn will be executed in pre-order
 * @param root
 * @param traversalFn
 * @category tree traversal
 * @mermaid
 *  flowchart TD
 *    B-->A
 *    B-->D
 *    D-->C
 * 	  D-->E
 * @example
 * ```js
 * prevorder(root,(node,fatherNode)=>{console.log(node)})
 * // => B A D C E
 * ```
 */
export declare function prevorder<T>(root: TreeNode<T>, traversalFn: (node: TreeNode<T>, fatherNode: TreeNode<T> | null) => any): void;
