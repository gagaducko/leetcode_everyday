declare class RBSTNode<T> {
    val: T;
    left: RBSTNode<T> | null;
    right: RBSTNode<T> | null;
    size: number;
    constructor(val: T, left?: RBSTNode<T> | null, right?: RBSTNode<T> | null);
}
declare type GetCompareKey = (a: any) => number;
/**
 * @category randomized binary search tree.
 * @description
 * a randomized binary search tree.
 * `search`, `insert`, `remove`, `find the k-th max value` achieve O(Logn) expected performance.
 * @example
 * ```js
 * const rbst = new RBST()
 * const arr=[1,7,3]
 * arr.forEach(v=>{
 *  rbst.insert(v)
 * })
 * rbst.search(3) // => 3
 * rbst.findKMax(1) // => 7
 * rbst.remove(3)
 * rbst.findKMax(2) // => 1
 *
 * ```
 */
export declare class RBST<T> {
    root: RBSTNode<T> | null;
    mapValueKey: GetCompareKey;
    constructor(fn?: GetCompareKey);
    /**
     * Insert the item as the root of the tree.
     * @param item
     * @param tree
     */
    private insertAsRoot;
    /**
     * Divide the tree into two parts :leftTree and rightTree.
     * The leftTree key is less than the specified key,
     * and the rightTree key is greater than the specified key.
     * @param key
     * @param tree
     */
    private split;
    /**
     * merge the leftTree and rightTree into one tree.
     * @param leftTree
     * @param rightTree
     */
    private join;
    private _insert;
    insert(item: T): void;
    search(key: number): T | null;
    remove(key: number): null | undefined;
    /**
     * find the k-th max item
     * @param k
     */
    findKMax(k: number): T | null;
}
export {};
