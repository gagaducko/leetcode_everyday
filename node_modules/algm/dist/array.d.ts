/**
 * Initializes an array with initial value of 0
 * @return return the new array
 * @category array
 * @example
 * ```js
 * initArray(3) // => [0,0,0]
 * initArray([3,2]) // => [[0,0],[0,0],[0,0]]
 * ```
 */
export declare function initArray(dimension: number | number[]): any[];
/**
 * Initializes a two-dimensional array
 * @param m
 * @param n
 * @param value the default value of element
 * @category array
 * @return return the new array
 * @example
 * ```js
 * init2Array(2,3) // => [[0,0,0],[0,0,0]]
 * ```
 */
export declare function init2Array(m: number, n: number, value?: number): number[][];
/**
 * merge all overlapped intervals
 * @param intervals
 * @category array
 * @example
 * ```js
 * mergeArray([[0,1],[1,2],[3,4]]) // => [[0,2],[3,4]]
 * ```
 */
export declare function mergeArray(intervals: number[][]): number[][];
/**
 * Intersection of two array
 * @param {any[]} arr1
 * @param {any[]} arr2
 * @return {any[]}
 * @category array
 * @example
 * ```js
 * intersect([1,2],[2,3]) // => [2]
 * ```
 */
export declare function intersect<T>(arr1: T[], arr2: T[]): T[];
/**
 *  the min sum to make array unique by subtracting of the element
 * @param arr an array of int
 * @category array
 * @example
 * ```js
 * countOfUniqueD([3,3,1]) // => 1,the unique array should be [3,2,1], 3->2
 * countOfUniqueD([3,3,3]) // => 3,the unique array should be [3,2,1], 3->2, 3->1
 * ```
 */
export declare function countOfUniqueD(arr: number[]): number;
/**
 * the min sum to make array unique by increasing the element
 * @param arr an array of int
 * @category array
 * @example
 * ```js
 * countOfUniqueA([1,1,2]) // => 2,the unique array should be [1,2,3]
 * countOfUniqueA([0,2,2,2,3]) // => 5 ,the unique array should be [0,2,3,4,5], 2->4,2->5
 * ```
 */
export declare function countOfUniqueA(arr: number[]): number;
/**
 * reverse the array from start to end
 * @category array
 * @example
 * ```js
 * reverse([2,3,4]) // => [4,3,2]
 * ```
 */
export declare function reverse<T>(arr: T[], start?: number, end?: number): T[];
interface IndexObj<T> {
    index: number;
    value: T;
}
/**
 * return an index arr
 * @category array
 * @example
 * ```js
 * toIndexArr([1,2,3]) // => [{index:0,value:1},{index:1,value:2},{index:2,value:3}]
 * ```
 */
export declare function toIndexArr<T>(arr: T[]): IndexObj<T>[];
declare type GetCompareKey<T> = (a: T) => any;
/**
 * Sort the array in ascending order by key
 * @param  arr the array
 * @param  fn return the key to sort, default key is value
 * @param  fn2 if the key is equal, using the second key
 * @category array
 * @example
 * ```js
 * sortA([3,1,2]) // => [1,2,3]
 * sortA([{height:3},{height:2},{height:1}],x=>x.height) // => [{height:1},{height:2},{height:3}]
 * sortA(['ca','ba','bd']) // => ['ba','bd','ca']
 * ```
 */
export declare function sortA<T>(arr: T[], fn?: GetCompareKey<T>, fn2?: GetCompareKey<T>): T[];
/**
 * Sort the array in descending order by key
 * will change the origin array
 * @param  arr the array
 * @param  getCompareKey return the key to sort
 * @param  getCompareKey2 if the key is equal, using the second key
 * @category array
 * @example
 * ```js
 * sortD([3,1,2]) // => [3,2,1]
 * sortD([{height:3},{height:2},{height:1}],x=>x.height) // => [{height:3},{height:2},{height:1}]
 * sortD(['ca','ba','bd']) // => ['ca','bd','ba']
 * sortD([{value:1,index:1},{value:2,index:3},{value:2,index:2}],x=>x.value,x=>x.index)
 * // => [{value:2,index:3},{value:2,index:2},{value:1,index:1}]
 * ```
 */
export declare function sortD<T>(arr: T[], getCompareKey?: GetCompareKey<T>, getCompareKey2?: GetCompareKey<T>): T[];
/**
 * Return the last value
 * @param arr the array
 * @category array
 * ```js
 * last([2,1,5]) // => 5
 * last([]) // => undefined
 * ```
 */
export declare function last<T>(arr: T[]): T;
interface PlainObj {
    [key: string]: any;
}
/**
 * Push a value to a property of the object
 * @example
 * ```js
 * const obj={}
 * push(obj,'key1','a')
 * push(obj,'key1','b')
 * push(obj,'key2','c')
 * console.log(obj) // => {key1:['a','b'],key2:['c']}
 * ```
 */
export declare function push(obj: PlainObj, key: string | number, item: any): void;
/**
 * Gets a unique key based on the parameter
 * ```js
 * key('abc','bd') // => 'abc#bd'
 * key(['a','b']) // => 'a#b'
 * ```
 */
export declare function key(...args: (number | string)[] | (number | string)[][]): string;
/**
 * compute the sum of an array
 * @category array
 * @example
 * ```js
 * sum([1,2,3]) // => 6
 * sum([]) // => 0
 * ```
 */
export declare function sum(arr: number[]): number;
/**
 * Get the max value
 * @category array
 * @example
 * ```js
 * max(1,3,2) // => 3
 * max([1,3,2]) // => 3
 * ```
 */
export declare function max(...arg: number[] | number[][]): number;
/**
 * Get the min value
 * @category array
 * @example
 * ```js
 * min(1,3,2) // => 1
 * min([1,3,2]) // => 1
 * ```
 */
export declare function min(...arg: number[] | number[][]): number;
/**
 * return a new arr that does not contains duplicate elements.
 * @category array
 * @example
 * ```js
 * unique([1,1,2,2,2,6,1]) //=> [1,2,6]
 * ```
 */
export declare function unique<T>(arr: T[]): T[];
export {};
