/**
 *   SkipList structure
 *   ---------------
 *  |     head(nil) |
 *  |       |       |
 *  |DoubleListNode | -> head(nil) - QuadListNode - QuadListNode - tail(nil)
 *  |       |       |      |                        |
 *  |DoubleListNode | -> head(nil) - QuadListNode - QuadListNode - tail(nil)
 *  |       |       |
 *  |     tail(nil) |
 *   ---------------
 *          ^
 *          |
 *          |
 *      DoubleList
 *
 *
 */
export declare class DoubleLinkNode<T> {
    next: DoubleLinkNode<T>;
    prev: DoubleLinkNode<T>;
    val: QuadList<T>;
    constructor(val: QuadList<T>);
}
export declare class DoubleLink<T> {
    nil: DoubleLinkNode<T>;
    constructor();
    firstLevel(): DoubleLinkNode<T>;
    insert(): DoubleLinkNode<T>;
    remove(node: DoubleLinkNode<T>): void;
}
declare class QuadListNode<T> {
    prev: QuadListNode<T>;
    next: QuadListNode<T>;
    above: QuadListNode<T> | null;
    below: QuadListNode<T> | null;
    val: T | undefined;
    constructor(val?: T);
}
declare class QuadList<T> {
    nil: QuadListNode<T>;
    constructor();
    static insertAboveAfter<T>(newNode: QuadListNode<T>, belowNode: QuadListNode<T> | null, leftNode: QuadListNode<T>): void;
    static remove<T>(node: QuadListNode<T>): void;
}
declare type GetCompareKey = (a: any) => number;
/**
 * a probabilistic data structure.
 * @category SkipList
 * @description
 * `search`, `insert`, `remove` achieve O(Logn) expected performance.
 * @example
 * ```js
 * const sl = new SkipList()
 * sl.insert(3)
 * sl.insert(1)
 * sl.insert(5)
 * sl.search(1) // => 1
 * ```
 */
export declare class SkipList<T> {
    dl: DoubleLink<T>;
    mapValueKey: GetCompareKey;
    constructor(fn?: GetCompareKey);
    private _search;
    search(key: number): T | null | undefined;
    insert(value: T): void;
    min(): T | undefined;
    max(): T | undefined;
    remove(key: number): void;
}
export {};
