export declare class TreeNode<T = number> {
    val: T;
    left: TreeNode<T> | null;
    right: TreeNode<T> | null;
    constructor(val: T, left?: TreeNode<T> | null, right?: TreeNode<T> | null);
}
/**
 * Encodes a tree to a single string.
 *
 * @mermaid
 * graph LR
 *   1 --- 2
 *   1 --- 3
 *   3 --- 4
 *   3 --- 5
 * @example
 * ```js
 * serialize(root) // => '[1,2,3,null,null,4,5]'
 * ```
 */
declare function serialize<T = number>(root: TreeNode<T> | null): string;
declare function serializeArr<T = number>(arr: (TreeNode<T> | null)[]): string;
/**
 * Decodes your encoded data to tree.
 */
declare function deserialize<T = number>(originData: string): TreeNode<T> | null;
declare function deserializeArr<T = number>(originData: string): (TreeNode<T> | null)[];
export { serialize, deserialize, serializeArr, deserializeArr };
/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */
