/**
 * Randomly returns integers in [min, max)
 * @category math
 * @example
 * ```js
 * random(1,2) // => 1
 * random(2,8) // => 4
 * ```
 */
export declare function random(min: number, max: number): number;
/**
 * Next bigger permutation
 * @param arr
 * @category math
 * @example
 * ```js
 * nextPermutation([1,2,3,4]) // => [1,2,4,3]
 * nextPermutation([4,3,2,1]) // => [1,2,3,4]
 * ```
 */
export declare function nextPermutation(arr: number[]): number[];
/**
 * Get the greatest common divisor of a and b
 * @category math
 * @example
 * ```js
 * gcd(4,2) // => 2
 * gcd(9,6) // => 3
 * ```
 */
export declare function gcd(a: number, b: number): number;
/**
 * The coordinates of the point [x,y] are rotated 90° anticlockwise around [x0,y0]
 * @category math
 * @example
 * ```js
 * rotate90([1,1],[2,2]) // => [1,3]
 * ```
 */
export declare function rotate90([x, y]: [number, number], [x0, y0]: [number, number]): [number, number];
/**
 * The coordinate of the point [x,y] are rotated 90° clockwise around [x0,y0]
 * @category math
 */
export declare function rotateCw90([x, y]: [number, number], [x0, y0]: [number, number]): [number, number];
/**
 * Compute the number of permutations c(n,m)=n*(n-1)*...(n-m+1)/(m!)
 * @category math
 * @example
 * ```js
 * c(5,2) // => 10n
 * c(4,2) // => 6n
 * c(5,0) // => 1n
 * ```
 */
export declare function c(n: number, m: number): bigint;
/**
 * First compute the number of permutations c(n,m)=n*(n-1)*...(n-m+1)/(m!)
 * Then take the remainder of modulo 10 * * 9 + 7
 * @category math
 * @example
 * ```js
 * cm(5,2) // => 10
 * cm(4,2) // => 6
 * cm(5,0) // => 1
 * ```
 */
export declare function cm(n: number, m: number): number;
/**
 * Returns the i th bit of the absolute value of num
 * @example
 * ```js
 * bit(9,1) // => 0
 * bit(4,2) // => 1
 * bit(3,0) // => 1
 * ```
 */
export declare function bit(num: number, i: number): number;
/**
 * Get the number of 1 in the binary number
 * @param n the number
 * @example
 * ```js
 * bitCount(0) // => 0
 * bitCount(3) // => 2
 * bitCount(4) // => 1
 * ```
 */
export declare function bitCount(n: number): number;
/**
 * Compute the remainder of m mod n.
 * The remainder is greater than or equal to 0.
 * @param m
 * @param n
 * @example
 * ```js
 * mod(2,3) // => 2
 * mod(-2,3) // => 1
 * mod(3,2) // => 1
 * mod(-2,2) // => 0
 * ```
 */
export declare function mod(m: number, n: number): number;
