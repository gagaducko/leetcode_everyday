interface TreeNode {
    l: number;
    r: number;
    v: any;
}
declare abstract class SegmentTree<T> {
    protected arr: T[];
    protected getLeafValue: (v: any) => any;
    protected getNotLeafValue: (vl: any, vr: any) => any;
    tree: TreeNode[];
    constructor(arr: T[], getLeafValue: (v: any) => any, getNotLeafValue: (vl: any, vr: any) => any);
    protected _build(u: number, l: number, r: number): void;
    protected _update(u: number, pos: number, v: T): void;
    abstract query(start: number, end: number): any;
}
/**
 * Max segment tree.
 * Query the maximum value of given range and update the value in O(Logn) time.
 *
 * @category segment tree
 * @example
 * ```js
 * const maxArr = new MaxArr([2,3,1,7,9])
 * const [l,r]=[0,2]
 * // find the maximum value from [l,r]
 * maxArr.query(l,r) //=> 3
 * maxArr.query(0,3) //=> 7
 * maxArr.update(1,9)
 * maxArr.query(0,3) //=> 9
 * ```
 * Provide the specified key
 * ```js
 * const maxArr = new MaxArr([{ name: 'li', age: 21 }, { name: 'wang', age: 24 }, { name: 'xx', age: 23 }],node=>node.age)
 * maxArr.query(0,2) //=> { name: 'wang', age: 24 }
 * maxArr.update(0, { name: 'xiao', age: 25 })
 * maxArr.query(0,2) //=> { name: 'xiao', age: 25 }
 * ```
 */
export declare class MaxArr<T> extends SegmentTree<T> {
    mapValueKey: (node: T) => number;
    constructor(arr: T[], mapValueKey?: (x: any) => any);
    private _query;
    query(start?: number, end?: number): T | undefined;
    update(pos: number, value: T): void;
}
/**
 * Sum segment tree.
 * Query the sum of given range and update the value in O(Logn) time.
 * @category segment tree
 * @example
 * ```js
 * const sumArr = new SumArr([2,3,1,7,9])
 * sumArr.query(0,2)
 * ```
 */
export declare class SumArr extends SegmentTree<number> {
    constructor(arr: number[]);
    private _query;
    query(start?: number, end?: number): number;
    update(pos: number, value: number): void;
}
/**
 * Given an array contains all the values,
 * insert the value one by one,and
 *  query the number of value in [lower,upper].
 * @category segment tree
 * @example
 * ```js
 * const arr = [1, 2, 3, 5, 7]
 * const vArr = new ValueArr(arr)
 * vArr.insert(1)
 * vArr.insert(3)
 * vArr.insert(5)
 * assert.strictEqual(vArr.query(1, 3), 2)
 * assert.strictEqual(vArr.query(1, 5), 3)
 * vArr.insert(1)
 * assert.strictEqual(vArr.query(1, 5), 4)
 * ```
 */
export declare class ValueArr extends SegmentTree<number> {
    constructor(arr: number[]);
    private _query;
    query(low: number, upper: number): number;
    private _insert;
    insert(v: number): void;
}
export {};
