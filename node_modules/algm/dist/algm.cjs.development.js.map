{"version":3,"file":"algm.cjs.development.js","sources":["../src/treeNode.ts","../src/listNode.ts","../src/array.ts","../src/hopcroftKarp.ts","../src/graph.ts","../src/interval.ts","../src/math.ts","../src/tree.ts","../src/rbst.ts","../src/pq.ts","../src/skiplist.ts","../src/segment.ts","../src/unionFind.ts","../src/manacher.ts"],"sourcesContent":["export class TreeNode<T = number> {\n  constructor(\n    public val: T,\n    public left: TreeNode<T> | null = null,\n    public right: TreeNode<T> | null = null\n  ) {}\n}\n\n/**\n * Encodes a tree to a single string.\n *\n * @mermaid\n * graph LR\n *   1 --- 2\n *   1 --- 3\n *   3 --- 4\n *   3 --- 5\n * @example\n * ```js\n * serialize(root) // => '[1,2,3,null,null,4,5]'\n * ```\n */\nfunction serialize<T = number>(root: TreeNode<T> | null): string {\n  if (!root) {\n    return JSON.stringify([])\n  }\n  let arr: (T | null)[] = []\n  let queue: (TreeNode<T> | null)[] = [root]\n  while (queue.length) {\n    let node = queue.shift()\n    if (node) {\n      arr.push(node.val)\n      queue.push(node.left)\n      queue.push(node.right)\n    } else {\n      arr.push(null)\n    }\n  }\n  let i = arr.length - 1\n  while (arr[i] === null) {\n    i--\n  }\n  arr.length = i + 1\n  return JSON.stringify(arr)\n}\n\nfunction serializeArr<T = number>(arr: (TreeNode<T> | null)[]): string {\n  const outArr = []\n  for (let i = 0; i < arr.length; i++) {\n    outArr.push(serialize(arr[i]))\n  }\n  return '[' + outArr.join(',') + ']'\n}\n\n/**\n * Decodes your encoded data to tree.\n */\nfunction deserialize<T = number>(originData: string): TreeNode<T> | null {\n  const data = JSON.parse(originData)\n  if (!data.length) {\n    return null\n  }\n  let val = data.shift() as T\n  let root = new TreeNode(val)\n  let queue: TreeNode<T>[] = [root]\n  while (queue.length) {\n    let node = queue.shift() as TreeNode<T>\n    let leftVal = data.shift()\n    if (leftVal === undefined) {\n      return root\n    }\n    if (leftVal !== null) {\n      let left = new TreeNode(leftVal)\n      node.left = left\n      queue.push(left)\n    }\n    let rightVal = data.shift()\n    if (rightVal === undefined) {\n      return root\n    }\n    if (rightVal !== null) {\n      let right = new TreeNode(rightVal)\n      node.right = right\n      queue.push(right)\n    }\n  }\n  return root\n}\n\nfunction deserializeArr<T = number>(\n  originData: string\n): (TreeNode<T> | null)[] {\n  const data: (T | null)[][] = JSON.parse(originData)\n  if (!data.length) {\n    return []\n  }\n  let outArr: (TreeNode<T> | null)[] = []\n  for (let i = 0; i < data.length; i++) {\n    outArr.push(deserialize(JSON.stringify(data[i])))\n  }\n  return outArr\n}\n\nexport { serialize, deserialize, serializeArr, deserializeArr }\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */\n","export class ListNode<T = number> {\n  constructor(\n    public val: T | undefined = undefined,\n    public next: ListNode<T> | null = null\n  ) {}\n}\n/**\n * Encodes a list to a single string.\n *\n * @mermaid\n * graph LR\n *   1 --- 2\n *   2 --- 3\n *   3 --- 4\n *   4 --- 5\n * @example\n * ```js\n * serialize(root) // => '[1,2,3,4,5]'\n * ```\n */\nexport function serialize<T = number>(head: ListNode<T> | null): string {\n  if (!head) {\n    return JSON.stringify([])\n  }\n  let arr = []\n  let node: ListNode<T> | null = head\n  while (node) {\n    arr.push(node.val)\n    node = node.next\n  }\n  return JSON.stringify(arr)\n}\n\nexport function serializeArr<T = number>(arr: (ListNode<T> | null)[]): string {\n  let out = []\n  for (let i = 0; i < arr.length; i++) {\n    out.push(serialize(arr[i]))\n  }\n  return '[' + out.join(',') + ']'\n}\n\n/**\n * Decodes your encoded data to list.\n */\nexport function deserialize<T = number>(\n  originData: string\n): ListNode<T> | null {\n  const data = JSON.parse(originData)\n  let header = new ListNode<T>()\n  let node = header\n  for (let i = 0; i < data.length; i++) {\n    node.next = new ListNode(data[i])\n    node = node.next\n  }\n  return header.next\n}\n\nexport function deserializeArr<T = number>(\n  originData: string\n): (ListNode<T> | null)[] {\n  const arr: T[][] = JSON.parse(originData)\n  let out: (ListNode<T> | null)[] = []\n  for (let i = 0; i < arr.length; i++) {\n    out.push(deserialize(JSON.stringify(arr[i])))\n  }\n  return out\n}\n/**\n * reverse a list\n */\nexport function reverseList<T>(head: ListNode<T> | null): ListNode<T> | null {\n  if (!head) {\n    return null\n  }\n  let prev = null\n  let cur: ListNode<T> | null = head\n  while (cur) {\n    let next: ListNode<T> | null = cur.next\n    cur.next = prev\n    prev = cur\n    cur = next\n  }\n  return prev\n}\n","/**\n * Initializes an array with initial value of 0\n * @return return the new array\n * @category array\n * @example\n * ```js\n * initArray(3) // => [0,0,0]\n * initArray([3,2]) // => [[0,0],[0,0],[0,0]]\n * ```\n */\nexport function initArray(dimension: number | number[]): any[] {\n  if (Number.isInteger(dimension)) {\n    return Array(dimension).fill(0)\n  }\n  if (!Array.isArray(dimension)) {\n    throw new Error('dimension sould be int or int array')\n  }\n  if (dimension.length === 1) {\n    let len = dimension[0]\n    return Array(len).fill(0)\n  }\n\n  let len = dimension[0]\n  return Array.from(Array(len), () => [...initArray(dimension.slice(1))])\n}\n/**\n * Initializes a two-dimensional array\n * @param m\n * @param n\n * @param value the default value of element\n * @category array\n * @return return the new array\n * @example\n * ```js\n * init2Array(2,3) // => [[0,0,0],[0,0,0]]\n * ```\n */\nexport function init2Array(m: number, n: number, value = 0): number[][] {\n  const arr: number[][] = []\n  for (let i = 0; i < m; i++) {\n    arr[i] = Array(n).fill(value)\n  }\n  return arr\n}\n\n/**\n * merge all overlapped intervals\n * @param intervals\n * @category array\n * @example\n * ```js\n * mergeArray([[0,1],[1,2],[3,4]]) // => [[0,2],[3,4]]\n * ```\n */\nexport function mergeArray(intervals: number[][]) {\n  if (!intervals.length) {\n    return []\n  }\n  intervals.sort((arr1, arr2) => arr1[0] - arr2[0])\n  let prev = intervals[0]\n  let result = []\n  for (let i = 1; i < intervals.length; i++) {\n    if (intervals[i][0] <= prev[1]) {\n      prev = [prev[0], Math.max(intervals[i][1], prev[1])]\n    } else {\n      result.push(prev)\n      prev = intervals[i]\n    }\n  }\n  result.push(prev)\n  return result\n}\n\n/**\n * Intersection of two array\n * @param {any[]} arr1\n * @param {any[]} arr2\n * @return {any[]}\n * @category array\n * @example\n * ```js\n * intersect([1,2],[2,3]) // => [2]\n * ```\n */\nexport function intersect<T>(arr1: T[], arr2: T[]): T[] {\n  const set = new Set(arr1)\n  let result = []\n\n  for (let i = 0; i < arr2.length; i++) {\n    const e = arr2[i]\n    if (set.has(e)) {\n      result.push(e)\n    }\n  }\n  return result\n}\n\n/**\n *  the min sum to make array unique by subtracting of the element\n * @param arr an array of int\n * @category array\n * @example\n * ```js\n * countOfUniqueD([3,3,1]) // => 1,the unique array should be [3,2,1], 3->2\n * countOfUniqueD([3,3,3]) // => 3,the unique array should be [3,2,1], 3->2, 3->1\n * ```\n */\nexport function countOfUniqueD(arr: number[]): number {\n  let result = 0\n  if (arr.length <= 1) {\n    return 0\n  }\n  sortD(arr)\n  let t = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    t--\n    if (t > arr[i]) {\n      t = arr[i]\n    } else {\n      result += arr[i] - t\n    }\n  }\n  return result\n}\n\n/**\n * the min sum to make array unique by increasing the element\n * @param arr an array of int\n * @category array\n * @example\n * ```js\n * countOfUniqueA([1,1,2]) // => 2,the unique array should be [1,2,3]\n * countOfUniqueA([0,2,2,2,3]) // => 5 ,the unique array should be [0,2,3,4,5], 2->4,2->5\n * ```\n */\nexport function countOfUniqueA(arr: number[]) {\n  let result = 0\n  if (arr.length <= 1) {\n    return 0\n  }\n  sortA(arr)\n  let t = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    t++\n    if (t < arr[i]) {\n      t = arr[i]\n    } else {\n      result += t - arr[i]\n    }\n  }\n  return result\n}\n\n/**\n * reverse the array from start to end\n * @category array\n * @example\n * ```js\n * reverse([2,3,4]) // => [4,3,2]\n * ```\n */\nexport function reverse<T>(arr: T[], start = 0, end = arr.length - 1): T[] {\n  for (let i = start; i < (start + end) / 2; i++) {\n    let t = arr[i]\n    arr[i] = arr[start + end - i]\n    arr[start + end - i] = t\n  }\n  return arr\n}\ninterface IndexObj<T> {\n  index: number\n  value: T\n}\n/**\n * return an index arr\n * @category array\n * @example\n * ```js\n * toIndexArr([1,2,3]) // => [{index:0,value:1},{index:1,value:2},{index:2,value:3}]\n * ```\n */\nexport function toIndexArr<T>(arr: T[]): IndexObj<T>[] {\n  let indexArr: IndexObj<T>[] = []\n  for (let i = 0; i < arr.length; i++) {\n    indexArr[i] = {\n      index: i,\n      value: arr[i],\n    }\n  }\n  return indexArr\n}\n\nfunction compare(v1: number | string, v2: number | string) {\n  if (typeof v1 !== typeof v2) {\n    throw new Error('the type of key should be the same')\n  }\n  if (typeof v1 !== 'string') {\n    return v1 - (v2 as number)\n  } else {\n    return v1.localeCompare(v2 as string)\n  }\n}\ntype GetCompareKey<T> = (a: T) => any\n/**\n * Sort the array in ascending order by key\n * @param  arr the array\n * @param  fn return the key to sort, default key is value\n * @param  fn2 if the key is equal, using the second key\n * @category array\n * @example\n * ```js\n * sortA([3,1,2]) // => [1,2,3]\n * sortA([{height:3},{height:2},{height:1}],x=>x.height) // => [{height:1},{height:2},{height:3}]\n * sortA(['ca','ba','bd']) // => ['ba','bd','ca']\n * ```\n */\nexport function sortA<T>(arr: T[], fn: GetCompareKey<T> = x => x, fn2 = fn) {\n  return arr.sort((x, y) => {\n    const key1 = fn(x)\n    const key2 = fn(y)\n    const r = compare(key1, key2)\n    if (r) {\n      return r\n    }\n    const key3 = fn2(x)\n    const key4 = fn2(y)\n    return compare(key3, key4)\n  })\n}\n/**\n * Sort the array in descending order by key\n * will change the origin array\n * @param  arr the array\n * @param  getCompareKey return the key to sort\n * @param  getCompareKey2 if the key is equal, using the second key\n * @category array\n * @example\n * ```js\n * sortD([3,1,2]) // => [3,2,1]\n * sortD([{height:3},{height:2},{height:1}],x=>x.height) // => [{height:3},{height:2},{height:1}]\n * sortD(['ca','ba','bd']) // => ['ca','bd','ba']\n * sortD([{value:1,index:1},{value:2,index:3},{value:2,index:2}],x=>x.value,x=>x.index)\n * // => [{value:2,index:3},{value:2,index:2},{value:1,index:1}]\n * ```\n */\nexport function sortD<T>(\n  arr: T[],\n  getCompareKey: GetCompareKey<T> = x => x,\n  getCompareKey2 = getCompareKey\n) {\n  return arr.sort((x, y) => {\n    const key1 = getCompareKey(x)\n    const key2 = getCompareKey(y)\n    const r = compare(key2, key1)\n    if (r) {\n      return r\n    }\n    const key3 = getCompareKey2(x)\n    const key4 = getCompareKey2(y)\n    return compare(key4, key3)\n  })\n}\n\n/**\n * Return the last value\n * @param arr the array\n * @category array\n * ```js\n * last([2,1,5]) // => 5\n * last([]) // => undefined\n * ```\n */\nexport function last<T>(arr: T[]): T {\n  return arr[arr.length - 1]\n}\ninterface PlainObj {\n  [key: string]: any\n}\n\n/**\n * Push a value to a property of the object\n * @example\n * ```js\n * const obj={}\n * push(obj,'key1','a')\n * push(obj,'key1','b')\n * push(obj,'key2','c')\n * console.log(obj) // => {key1:['a','b'],key2:['c']}\n * ```\n */\nexport function push(obj: PlainObj, key: string | number, item: any) {\n  if (!obj[key]) {\n    obj[key] = []\n  }\n  obj[key].push(item)\n}\n/**\n * Gets a unique key based on the parameter\n * ```js\n * key('abc','bd') // => 'abc#bd'\n * key(['a','b']) // => 'a#b'\n * ```\n */\nexport function key(\n  ...args: (number | string)[] | (number | string)[][]\n): string {\n  if (Array.isArray(args[0])) {\n    return args[0].join('#')\n  }\n  return args.join('#')\n}\n\n/**\n * compute the sum of an array\n * @category array\n * @example\n * ```js\n * sum([1,2,3]) // => 6\n * sum([]) // => 0\n * ```\n */\nexport function sum(arr: number[]) {\n  return arr.reduce((prev, cur) => prev + cur, 0)\n}\n\n/**\n * Get the max value\n * @category array\n * @example\n * ```js\n * max(1,3,2) // => 3\n * max([1,3,2]) // => 3\n * ```\n */\nexport function max(...arg: number[] | number[][]): number {\n  if (!Array.isArray(arg[0])) {\n    return Math.max(...(arg as number[]))\n  }\n\n  arg = arg[0]\n\n  if (arg.length <= 10000) {\n    return Math.max(...arg)\n  }\n\n  let max = -Infinity\n\n  for (const num of arg) {\n    max = Math.max(max, num)\n  }\n\n  return max\n}\n\n/**\n * Get the min value\n * @category array\n * @example\n * ```js\n * min(1,3,2) // => 1\n * min([1,3,2]) // => 1\n * ```\n */\nexport function min(...arg: number[] | number[][]): number {\n  if (!Array.isArray(arg[0])) {\n    return Math.min(...(arg as number[]))\n  }\n\n  arg = arg[0]\n\n  if (arg.length <= 10000) {\n    return Math.min(...arg)\n  }\n\n  let min = Infinity\n\n  for (const num of arg) {\n    min = Math.min(min, num)\n  }\n\n  return min\n}\n\n/**\n * return a new arr that does not contains duplicate elements.\n * @category array\n * @example\n * ```js\n * unique([1,1,2,2,2,6,1]) //=> [1,2,6]\n * ```\n */\nexport function unique<T>(arr: T[]): T[] {\n  return [...new Set(arr)]\n}\n","/**\n * check if the value is `undefined`\n */\nfunction isNil(value: any): value is undefined {\n  return value === undefined\n}\ninterface DistMap {\n  [key: string]: number\n}\n/**\n * bipartite matching algorithms\n *\n * the [Hopcroft–Karp algorithm](https://en.wikipedia.org/wiki/Hopcroft%E2%80%93Karp_algorithm) is an algorithm that takes as input a bipartite graph and produces as output a maximum cardinality matching\n *\n * bipartite graph contains two vertex set X and Y\n * @param m the number of X\n * @param adj the adjacency array of X\n * @category Graph\n * @example\n * ```js\n * hopcroftKarp(5,[[5, 6], [5, 9], [7, 8], [5, 9], [6, 8]])\n * // => Map(10){ 0=>6,1=>9,2=>7,3=>5,4=>8,6=>0,7=>2,8=>4,9=>1 }\n * ```\n */\nexport function hopcroftKarp(m: number, adjArr: number[][]) {\n  // record the matching vertices\n  let map = new Map<number, number>()\n  let dist: DistMap = {}\n  while (bfs(map, dist, m, adjArr)) {\n    // dfs stage\n    for (let i = 0; i < m; i++) {\n      // the augmenting-path start from a unmatched vertice\n      if (!map.has(i)) {\n        dfs(i, map, dist, m, adjArr)\n      }\n    }\n  }\n  return map\n}\n/**\n * compute the shortest distance of all the vertices in X\n * @param map record the matching vertices\n * @param dist the distance map of the vertices in X\n * @param m the number of X\n * @param adjArr the adjacency array of X\n */\nfunction bfs(\n  map: Map<number, number>,\n  dist: DistMap,\n  m: number,\n  adjArr: number[][]\n) {\n  let queue: number[] = []\n  // record the shortest length of augmenting-path\n  // in fact the shortest length is shortDis*2-1\n  let shortDis = Infinity\n  // init the distance of vertices in every bfs stage\n  // the distance is 0 when the vertice do not match, or that is Infinity\n  for (let i = 0; i < m; i++) {\n    if (!map.has(i)) {\n      dist[i] = 0\n      queue.push(i)\n    } else {\n      dist[i] = Infinity\n    }\n  }\n\n  while (queue.length) {\n    const node = queue.shift()!\n    // this ensure all the augmenting-path length in the next dfs stage equal shortDis\n    if (dist[node] >= shortDis) {\n      break\n    }\n    const adjNodes = adjArr[node]\n    for (let i = 0; i < adjNodes.length; i++) {\n      const adjNode = adjNodes[i]\n      const nextNode = map.get(adjNode)\n      if (isNil(nextNode)) {\n        // find a augmenting-path\n        shortDis = dist[node] + 1\n      } else if (dist[nextNode] === Infinity) {\n        dist[nextNode] = dist[node] + 1\n        queue.push(nextNode)\n      }\n    }\n  }\n  return shortDis < Infinity\n}\nfunction dfs(\n  node: number,\n  map: Map<number, number>,\n  dist: DistMap,\n  m: number,\n  adjArr: number[][]\n): boolean {\n  const adjNodes = adjArr[node]\n  for (let i = 0; i < adjNodes.length; i++) {\n    const adjNode = adjNodes[i]\n    const nextNode = map.get(adjNode)\n    //find a augmenting-path\n    if (isNil(nextNode)) {\n      map.set(node, adjNode)\n      map.set(adjNode, node)\n      return true\n    } else if (dist[nextNode] === dist[node] + 1) {\n      if (dfs(nextNode, map, dist, m, adjArr)) {\n        map.set(node, adjNode)\n        map.set(adjNode, node)\n        return true\n      }\n    }\n  }\n  // mark this vertice has fail,so is will not visit in current dfs stage\n  dist[node] = Infinity\n  return false\n}\n","import { hopcroftKarp } from './hopcroftKarp'\nimport { max } from './index'\n/**\n * Calculate the connectivity degree according to the undirected graph adjacency array.\n * @param {number[][]} adjArr adjacency array\n * @param {number} n vertex number\n * @category Graph\n * @mermaid\n * graph LR\n *   0 --- 4\n *   1 --- 2\n *   2 --- 3\n * @example\n * ```js\n * getConnectedNumByAdjArr([[4],[2],[1,3],[2],[0]]) // => 2\n * ```\n */\nexport function getConnectedNumByAdjArr(\n  adjArr: number[][],\n  n: number = adjArr.length\n) {\n  let set: Set<number> = new Set()\n  let num = 0\n  for (let i = 0; i < n; i++) {\n    if (!set.has(i)) {\n      num++\n      dfs(i, set, adjArr)\n    }\n  }\n  return num\n}\nfunction dfs(node: number, set: Set<number>, adjArr: number[][]) {\n  set.add(node)\n  const adjNodes: number[] = adjArr[node] || []\n  for (let i = 0; i < adjNodes.length; i++) {\n    if (!set.has(adjNodes[i])) {\n      dfs(adjNodes[i], set, adjArr)\n    }\n  }\n}\n\n/**\n * Calculate the connectivity degree according to the undirected graph adjacency matrix.\n * @category Graph\n * @param {number[][]} adjMatrix 邻接矩阵\n */\nexport function getConnectedNumByAdjMatrix(adjMatrix: number[][]) {\n  let num = 0\n  const n = adjMatrix.length\n  let set: Set<number> = new Set()\n  for (let i = 0; i < n; i++) {\n    if (!set.has(i)) {\n      num++\n      dfs2(i, set, adjMatrix)\n    }\n  }\n  return num\n}\n\nfunction dfs2(index: number, set: Set<number>, isConnected: number[][]) {\n  set.add(index)\n  for (let j = 0; j < isConnected.length; j++) {\n    if (isConnected[index][j] && !set.has(j)) {\n      dfs(j, set, isConnected)\n    }\n  }\n}\n\n/**\n * bipartite graph contains two vertex set X and Y\n * Reference:https://en.wikipedia.org/wiki/K%C5%91nig%27s_theorem_(graph_theory)\n * @param m the number of set X\n * @param adjArr the adjacency array of X\n * @param n the number of set Y\n */\nexport function minCoverVertices(m: number, adjArr: number[][], n?: number) {\n  const map = hopcroftKarp(m, adjArr)\n  if (n === undefined) {\n    n = max(adjArr.map(edge => max(edge))) + 1\n  }\n\n  let arr = []\n  let set = new Set()\n  for (let i = 0; i < m; i++) {\n    // find not matched vertex in m\n    if (!map.has(i)) {\n      set.add(i)\n      arr.push(i)\n    }\n  }\n  let isInX = true\n  while (arr.length) {\n    if (isInX) {\n      const copyArr = arr.splice(0)\n      copyArr.forEach(x => {\n        let adjVertices = adjArr[x]\n        for (let i = 0; i < adjVertices.length; i++) {\n          let y = adjVertices[i]\n          if (!set.has(y)) {\n            set.add(y)\n            const newX = map.get(y)\n            arr.push(newX)\n            set.add(newX)\n          }\n        }\n      })\n    }\n  }\n  let coverVertices = []\n  for (let i = 0; i < m; i++) {\n    if (!set.has(i)) {\n      coverVertices.push(i)\n    }\n  }\n  for (let i = m; i < n!; i++) {\n    if (set.has(i)) {\n      coverVertices.push(i)\n    }\n  }\n  return coverVertices\n}\n","import { sortA } from './array'\n/**\n * minimum number of intervals to cover the target interval\n * @category interval\n */\nexport function minIntervalCover(intervals: number[][]) {\n  sortA(intervals, v => v[0])\n  if (!intervals.length) {\n    return 0\n  }\n  let c = 1\n  let [, right] = intervals[0]\n  for (let i = 1; i < intervals.length; i++) {\n    if (intervals[i][0] <= right) {\n      right = Math.max(right, intervals[i][1])\n    } else {\n      c++\n      right = intervals[i][1]\n    }\n  }\n  return c\n}\n\n/**\n *\n * @param {number[][]} intervals\n * @category interval\n */\nexport function maxIntervalDisjoint(intervals: number[][]) {\n  sortA(intervals, v => v[1])\n\n  if (!intervals.length) {\n    return 0\n  }\n  let c = 1\n  let [, right] = intervals[0]\n\n  for (let i = 1; i < intervals.length; i++) {\n    const interval = intervals[i]\n    if (interval[0] > right) {\n      c++\n      right = interval[1]\n    }\n  }\n  return c\n}\n/**\n * @category interval\n */\nexport const medium = (function() {\n  let lastValue: any = null\n  return function(left: number, right: number) {\n    let m = Math.floor((left + right) / 2)\n    if (m === lastValue) {\n      m = Math.ceil((left + right) / 2)\n    }\n    lastValue = m\n    return m\n  }\n})()\n","/**\n * Randomly returns integers in [min, max)\n * @category math\n * @example\n * ```js\n * random(1,2) // => 1\n * random(2,8) // => 4\n * ```\n */\nexport function random(min: number, max: number) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(min + Math.random() * (max - min))\n}\n/**\n * Next bigger permutation\n * @param arr\n * @category math\n * @example\n * ```js\n * nextPermutation([1,2,3,4]) // => [1,2,4,3]\n * nextPermutation([4,3,2,1]) // => [1,2,3,4]\n * ```\n */\nexport function nextPermutation(arr: number[]) {\n  let i = arr.length - 1\n  while (i >= 1 && arr[i] <= arr[i - 1]) {\n    i--\n  }\n  if (i === 0) {\n    return arr.reverse()\n  }\n  i--\n  let min = arr[i + 1]\n  let index: number = i + 1\n  for (let j = arr.length - 1; j > i; j--) {\n    if (arr[j] > arr[i] && arr[j] < min) {\n      min = Math.min(arr[j], min)\n      index = j\n    }\n  }\n  ;[arr[i], arr[index]] = [arr[index], arr[i]]\n  for (let j = i + 1; j <= Math.floor((i + arr.length) / 2); j++) {\n    ;[arr[j], arr[arr.length + i - j]] = [arr[arr.length + i - j], arr[j]]\n  }\n  return arr\n}\n\n/**\n * Get the greatest common divisor of a and b\n * @category math\n * @example\n * ```js\n * gcd(4,2) // => 2\n * gcd(9,6) // => 3\n * ```\n */\nexport function gcd(a: number, b: number): number {\n  if (b === 0) {\n    return a\n  }\n  return gcd(b, a % b)\n}\n/**\n * The coordinates of the point [x,y] are rotated 90° anticlockwise around [x0,y0]\n * @category math\n * @example\n * ```js\n * rotate90([1,1],[2,2]) // => [1,3]\n * ```\n */\nexport function rotate90(\n  [x, y]: [number, number],\n  [x0, y0]: [number, number]\n): [number, number] {\n  return [x0 + y0 - y, x - x0 + y0]\n}\n\n/**\n * The coordinate of the point [x,y] are rotated 90° clockwise around [x0,y0]\n * @category math\n */\nexport function rotateCw90(\n  [x, y]: [number, number],\n  [x0, y0]: [number, number]\n): [number, number] {\n  return [y - y0 + x0, x0 - x + y0]\n}\n\n/**\n * Compute the number of permutations c(n,m)=n*(n-1)*...(n-m+1)/(m!)\n * @category math\n * @example\n * ```js\n * c(5,2) // => 10n\n * c(4,2) // => 6n\n * c(5,0) // => 1n\n * ```\n */\nexport function c(n: number, m: number): bigint {\n  if (m === 0) {\n    return 1n\n  }\n  const bm = BigInt(m)\n  const bn = BigInt(n)\n  let s = 1n\n  let s2 = 1n\n  for (let i = 0n; i < bm; i++) {\n    s *= bn - i\n  }\n  for (let i = 1n; i <= bm; i++) {\n    s2 *= i\n  }\n  return s / s2\n}\n\n/**\n * First compute the number of permutations c(n,m)=n*(n-1)*...(n-m+1)/(m!)\n * Then take the remainder of modulo 10 * * 9 + 7\n * @category math\n * @example\n * ```js\n * cm(5,2) // => 10\n * cm(4,2) // => 6\n * cm(5,0) // => 1\n * ```\n */\nexport function cm(n: number, m: number) {\n  const d = BigInt(10 ** 9 + 7)\n  return Number(c(n, m) % d)\n}\n\n/**\n * Returns the i th bit of the absolute value of num\n * @example\n * ```js\n * bit(9,1) // => 0\n * bit(4,2) // => 1\n * bit(3,0) // => 1\n * ```\n */\nexport function bit(num: number, i: number) {\n  if (num < 0) num = num * -1\n\n  while (i > 0) {\n    num = Math.floor(num / 2)\n    i--\n  }\n  return num % 2\n}\n\n/**\n * Get the number of 1 in the binary number\n * @param n the number\n * @example\n * ```js\n * bitCount(0) // => 0\n * bitCount(3) // => 2\n * bitCount(4) // => 1\n * ```\n */\nexport function bitCount(n: number) {\n  let c = 0\n\n  while (n) {\n    if (n % 2 === 1) {\n      c++\n    }\n\n    n = Math.floor(n / 2)\n  }\n\n  return c\n}\n\n/**\n * Compute the remainder of m mod n.\n * The remainder is greater than or equal to 0.\n * @param m\n * @param n\n * @example\n * ```js\n * mod(2,3) // => 2\n * mod(-2,3) // => 1\n * mod(3,2) // => 1\n * mod(-2,2) // => 0\n * ```\n */\nexport function mod(m: number, n: number) {\n  const remainder = m % n\n  if (remainder < 0) {\n    return remainder + n\n  }\n  return remainder\n}\n","import { last } from './array'\nimport { TreeNode } from './treeNode'\n\n/**\n * The traversalFn will be executed in post-order\n * @param root\n * @param traversalFn\n * @category tree traversal\n * @mermaid\n *  flowchart TD\n *    B-->A\n *    B-->D\n *    D-->C\n * \t  D-->E\n * @example\n * ```js\n * postorder(root,(node,fatherNode)=>{console.log(node)})\n * // => A C E D B\n * ```\n */\nexport function postorder<T>(\n  root: TreeNode<T>,\n  fn1: (node: TreeNode<T>) => any\n) {\n  if (!root) {\n    return\n  }\n  let map = new Map()\n  let queue = [root]\n  while (queue.length) {\n    let top = last(queue)\n    if (!map.get(top)) {\n      map.set(top, true)\n      if (top.right) {\n        queue.push(top.right)\n      }\n      if (top.left) {\n        queue.push(top.left)\n      }\n    } else {\n      queue.pop()\n      fn1(top)\n    }\n  }\n}\n\n/**\n * The traversalFn will be executed in in-order\n * @param root\n * @param traversalFn\n * @category tree traversal\n * @mermaid\n *  flowchart TD\n *    B-->A\n *    B-->D\n *    D-->C\n * \t  D-->E\n * @example\n * ```js\n * inorder(root,(node,fatherNode)=>{console.log(node)})\n * // => A B C D E\n * ```\n */\nexport function inorder<T>(root: TreeNode<T>, fn1: (node: TreeNode<T>) => any) {\n  if (!root) {\n    return\n  }\n  let map = new Map()\n  let queue = [root]\n  while (queue.length) {\n    let top = last(queue)\n    if (!map.get(top)) {\n      map.set(top, true)\n      if (top.left) {\n        queue.push(top.left)\n      }\n    } else {\n      queue.pop()\n      fn1(top)\n      if (top.right) {\n        queue.push(top.right)\n      }\n    }\n  }\n}\n\n/**\n * The traversalFn will be executed in pre-order\n * @param root\n * @param traversalFn\n * @category tree traversal\n * @mermaid\n *  flowchart TD\n *    B-->A\n *    B-->D\n *    D-->C\n * \t  D-->E\n * @example\n * ```js\n * prevorder(root,(node,fatherNode)=>{console.log(node)})\n * // => B A D C E\n * ```\n */\nexport function prevorder<T>(\n  root: TreeNode<T>,\n  traversalFn: (node: TreeNode<T>, fatherNode: TreeNode<T> | null) => any\n) {\n  if (!root) {\n    return\n  }\n  let queue = [root]\n  let fatherMap = new Map()\n  fatherMap.set(root, null)\n  while (queue.length) {\n    let top = queue.pop() as TreeNode<T>\n    traversalFn(top, fatherMap.get(top))\n\n    if (top.right) {\n      fatherMap.set(top.right, top)\n      queue.push(top.right)\n    }\n    if (top.left) {\n      fatherMap.set(top.left, top)\n      queue.push(top.left)\n    }\n  }\n}\n","import { random } from './math'\nclass RBSTNode<T> {\n  size = 1\n  constructor(\n    public val: T,\n    public left: RBSTNode<T> | null = null,\n    public right: RBSTNode<T> | null = null\n  ) {}\n}\ntype GetCompareKey = (a: any) => number\n/**\n * @category randomized binary search tree.\n * @description\n * a randomized binary search tree.\n * `search`, `insert`, `remove`, `find the k-th max value` achieve O(Logn) expected performance.\n * @example\n * ```js\n * const rbst = new RBST()\n * const arr=[1,7,3]\n * arr.forEach(v=>{\n *  rbst.insert(v)\n * })\n * rbst.search(3) // => 3\n * rbst.findKMax(1) // => 7\n * rbst.remove(3)\n * rbst.findKMax(2) // => 1\n *\n * ```\n */\nexport class RBST<T> {\n  root: RBSTNode<T> | null = null\n  mapValueKey: GetCompareKey\n  constructor(fn: GetCompareKey = x => x) {\n    this.mapValueKey = fn\n  }\n  /**\n   * Insert the item as the root of the tree.\n   * @param item\n   * @param tree\n   */\n  private insertAsRoot(item: T, tree: RBSTNode<T> | null): RBSTNode<T> {\n    if (!tree) {\n      return new RBSTNode(item)\n    }\n    const size = tree.size + 1\n    const key = this.mapValueKey(item)\n    const [left, right] = this.split(key, tree)\n    const newNode = new RBSTNode(item, left, right)\n    newNode.size = size\n    return newNode\n  }\n  /**\n   * Divide the tree into two parts :leftTree and rightTree.\n   * The leftTree key is less than the specified key,\n   * and the rightTree key is greater than the specified key.\n   * @param key\n   * @param tree\n   */\n  private split(\n    key: number,\n    tree: RBSTNode<T> | null\n  ): [RBSTNode<T> | null, RBSTNode<T> | null] {\n    if (!tree) {\n      return [null, null]\n    }\n    if (this.mapValueKey(tree.val) > key) {\n      let [leftTree, rightTree] = this.split(key, tree.left)\n      tree.left = rightTree\n      tree.size -= leftTree ? leftTree.size : 0\n      return [leftTree, tree]\n    } else {\n      let [leftTree, rightTree] = this.split(key, tree.right)\n      tree.right = leftTree\n      tree.size -= rightTree ? rightTree.size : 0\n      return [tree, rightTree]\n    }\n  }\n  /**\n   * merge the leftTree and rightTree into one tree.\n   * @param leftTree\n   * @param rightTree\n   */\n  private join(\n    leftTree: RBSTNode<T> | null,\n    rightTree: RBSTNode<T> | null\n  ): RBSTNode<T> | null {\n    const m = leftTree ? leftTree.size : 0\n    const n = rightTree ? rightTree.size : 0\n    const total = m + n\n    if (!total) return null\n    const r = random(0, n + m)\n    if (r < m) {\n      leftTree!.right = this.join(leftTree!.right, rightTree)\n      leftTree!.size = total\n      return leftTree\n    } else {\n      rightTree!.left = this.join(leftTree, rightTree!.left)\n      rightTree!.size = total\n      return rightTree\n    }\n  }\n  private _insert(item: T, tree: RBSTNode<T> | null) {\n    if (!tree) {\n      return this.insertAsRoot(item, tree)\n    }\n    const n = tree.size\n    const r = random(0, n + 1)\n    if (r === n) {\n      return this.insertAsRoot(item, tree)\n    } else if (this.mapValueKey(item) < this.mapValueKey(tree.val)) {\n      tree.left = this._insert(item, tree.left)\n    } else {\n      tree.right = this._insert(item, tree.right)\n    }\n    tree.size++\n    return tree\n  }\n  insert(item: T) {\n    this.root = this._insert(item, this.root)\n  }\n\n  search(key: number) {\n    let tree: RBSTNode<T> | null = this.root\n    while (tree) {\n      const curKey = this.mapValueKey(tree.val)\n      if (key === curKey) {\n        return tree.val\n      } else if (key < curKey) {\n        tree = tree.left\n      } else {\n        tree = tree.right\n      }\n    }\n    return null\n  }\n  remove(key: number) {\n    if (this.search(key) === null) {\n      return\n    }\n    let tree: RBSTNode<T> | null = this.root\n    let father = null\n    let p\n    while (tree) {\n      const curKey = this.mapValueKey(tree.val)\n      if (key === curKey) {\n        if (!father) {\n          this.root = this.join(tree.left, tree.right)\n        } else {\n          const newTree = this.join(tree.left, tree.right)\n          father[p as 'left' | 'right'] = newTree\n        }\n        return\n      } else if (key < curKey) {\n        father = tree\n        p = 'left'\n        tree.size--\n        tree = tree.left\n      } else {\n        father = tree\n        p = 'right'\n        tree.size--\n        tree = tree.right\n      }\n    }\n    return null\n  }\n  /**\n   * find the k-th max item\n   * @param k\n   */\n  findKMax(k: number) {\n    const root = this.root\n    if (!root) return null\n    const size = root.size\n    k = size + 1 - k\n    if (k > size) {\n      return null\n    }\n    let tree: RBSTNode<T> | null = root\n    let prevNum = 0\n    while (tree) {\n      const leftSize = tree.left?.size || 0\n      const curRank = prevNum + leftSize + 1\n      if (k === curRank) {\n        return tree.val\n      } else if (k < curRank) {\n        tree = tree.left\n      } else {\n        prevNum = curRank\n        tree = tree.right\n      }\n    }\n    return null\n  }\n}\n","type GetCompareKey<T> = (a: T) => number\n\nclass PQ<T> {\n  keys: T[]\n  mapValueKey: GetCompareKey<T>\n  constructor(keys: T[] = [], fn: GetCompareKey<T> = (x: any) => x) {\n    this.keys = [...keys]\n    this.mapValueKey = fn\n\n    for (let i = Math.floor((this.keys.length - 2) / 2); i >= 0; i--) {\n      this.sink(i)\n    }\n  }\n\n  insert(key: T) {\n    this.keys.push(key)\n    this.swim(this.keys.length - 1)\n  }\n\n  protected exch(i: number, j: number) {\n    ;[this.keys[i], this.keys[j]] = [this.keys[j], this.keys[i]]\n  }\n\n  protected less(i: number, j: number) {\n    return this.mapValueKey(this.keys[i]) - this.mapValueKey(this.keys[j]) < 0\n  }\n\n  protected swim(index: number) {\n    let father = Math.floor((index - 1) / 2)\n\n    while (father >= 0 && this.less(father, index)) {\n      this.exch(index, father)\n      index = father\n      father = Math.floor((father - 1) / 2)\n    }\n  }\n\n  protected sink(index: number) {\n    let len = this.keys.length\n    let j = index * 2 + 1\n\n    while (j < len) {\n      if (j + 1 < len && this.less(j, j + 1)) {\n        j++\n      }\n\n      if (this.less(index, j)) {\n        this.exch(index, j)\n        index = j\n        j = j * 2 + 1\n      } else {\n        break\n      }\n    }\n  }\n\n  protected peek() {\n    return this.keys[0]\n  }\n\n  protected poll() {\n    let head = this.peek()\n    this.exch(0, this.keys.length - 1)\n    this.keys.length = this.keys.length - 1\n    this.sink(0)\n    return head\n  }\n\n  isEmpty() {\n    return !this.keys.length\n  }\n\n  size() {\n    return this.keys.length\n  }\n}\n\n/**\n * @category priority queue\n * @example\n * ```js\n * const input =  [4, 3, 1]\n * const maxP = new MaxPQ(input)\n * maxP.max() //=> 4\n * maxP.insert(5)\n * maxP.max() //=> 5\n * maxP.insert(8)\n * maxP.max() //=> 8\n * maxP.delMax()\n * maxP.max() //=> 5\n * ```\n * Provide the specified key\n * ```js\n * const input = [{ name: 'xiao', age: 21 }, { name: 'wang', age: 22 }, { name: 'li', age: 25 }]\n * const maxP = new MaxPQ(input, v => v.age)\n * const m = maxP.max() //=> { name: 'li', age: 25 }\n * ```\n *\n */\nexport class MaxPQ<T> extends PQ<T> {\n  max() {\n    return this.peek()\n  }\n\n  delMax() {\n    return this.poll()\n  }\n}\n\n/**\n * @category priority queue\n * @example\n * ```js\n * const minPQ = new MinPQ([5, 1, 4, 2])\n * minPQ.min() // => 1\n * minPQ.delMin()\n * minPQ.min() // => 2\n * ```\n * Provide the specified key\n * ```js\n * const input = [{ name: 'xiao', age: 21 }, { name: 'wang', age: 22 }, { name: 'li', age: 25 }]\n * const minP = new MinPQ(input, v => v.age)\n * minP.min() // => { name: 'xiao', age: 21 }\n * ```\n */\nexport class MinPQ<T> extends PQ<T> {\n  constructor(keys: T[] = [], fn: GetCompareKey<T> = (x: any) => x) {\n    super(keys, x => -1 * fn(x))\n  }\n\n  min() {\n    return this.peek()\n  }\n\n  delMin() {\n    return this.poll()\n  }\n}\n","/**\n *   SkipList structure\n *   ---------------\n *  |     head(nil) |\n *  |       |       |\n *  |DoubleListNode | -> head(nil) - QuadListNode - QuadListNode - tail(nil)\n *  |       |       |      |                        |\n *  |DoubleListNode | -> head(nil) - QuadListNode - QuadListNode - tail(nil)\n *  |       |       |\n *  |     tail(nil) |\n *   ---------------\n *          ^\n *          |\n *          |\n *      DoubleList\n *\n *\n */\nexport class DoubleLinkNode<T> {\n  next: DoubleLinkNode<T>\n  prev: DoubleLinkNode<T>\n  val: QuadList<T>\n  constructor(val: QuadList<T>) {\n    this.next = this\n    this.prev = this\n    this.val = val\n  }\n}\nexport class DoubleLink<T> {\n  nil: DoubleLinkNode<T>\n  constructor() {\n    const qlList = new QuadList<T>()\n    this.nil = new DoubleLinkNode<T>(qlList)\n  }\n  firstLevel() {\n    if (this.nil.next === this.nil) {\n      this.insert()\n    }\n    return this.nil.next\n  }\n  insert() {\n    const ql = new QuadList<T>()\n    const node = new DoubleLinkNode(ql)\n    this.nil.next.prev = node\n    node.next = this.nil.next\n    this.nil.next = node\n    node.prev = this.nil\n    if (node.next !== this.nil) {\n      // link the above node and below node\n      node.val.nil.below = node.next.val.nil\n      node.next.val.nil.above = node.val.nil\n    }\n    return node\n  }\n  remove(node: DoubleLinkNode<T>) {\n    node.prev = node.next\n  }\n}\nclass QuadListNode<T> {\n  prev: QuadListNode<T>\n  next: QuadListNode<T>\n  above: QuadListNode<T> | null\n  below: QuadListNode<T> | null\n  val: T | undefined\n  constructor(val?: T) {\n    this.prev = this\n    this.next = this\n    this.above = null\n    this.below = null\n    this.val = val\n  }\n}\nclass QuadList<T> {\n  nil: QuadListNode<T>\n  constructor() {\n    this.nil = new QuadListNode()\n  }\n  static insertAboveAfter<T>(\n    newNode: QuadListNode<T>,\n    belowNode: QuadListNode<T> | null,\n    leftNode: QuadListNode<T>\n  ) {\n    newNode.next = leftNode.next\n    leftNode.next.prev = newNode\n    leftNode.next = newNode\n    if (belowNode) {\n      belowNode.above = newNode\n    }\n    newNode.prev = leftNode\n    newNode.below = belowNode\n  }\n  static remove<T>(node: QuadListNode<T>) {\n    node.prev.next = node.next\n    node.next.prev = node.prev\n  }\n}\ntype GetCompareKey = (a: any) => number\ninterface Position<T> {\n  dlNode: DoubleLinkNode<T>\n  qlNode: QuadListNode<T>\n}\n\n/**\n * a probabilistic data structure.\n * @category SkipList\n * @description\n * `search`, `insert`, `remove` achieve O(Logn) expected performance.\n * @example\n * ```js\n * const sl = new SkipList()\n * sl.insert(3)\n * sl.insert(1)\n * sl.insert(5)\n * sl.search(1) // => 1\n * ```\n */\nexport class SkipList<T> {\n  dl: DoubleLink<T>\n  mapValueKey: GetCompareKey\n  constructor(fn: GetCompareKey = x => x) {\n    this.dl = new DoubleLink()\n    this.mapValueKey = fn\n  }\n  private _search(\n    key: number,\n    dlNode: DoubleLinkNode<T> = this.dl.firstLevel(),\n    qlNode: QuadListNode<T> = dlNode.val.nil\n  ): Position<T> {\n    const tail = dlNode.val.nil\n    qlNode = qlNode.next\n    while (qlNode !== tail && this.mapValueKey(qlNode.val) <= key) {\n      qlNode = qlNode.next\n    }\n    qlNode = qlNode.prev\n\n    if (!qlNode.below) {\n      return {\n        dlNode,\n        qlNode,\n      }\n    }\n    qlNode = qlNode.below\n    return this._search(key, dlNode.next, qlNode)\n  }\n  search(key: number) {\n    const { qlNode } = this._search(key)\n    if (this.mapValueKey(qlNode.val) === key) {\n      return qlNode.val\n    }\n    return null\n  }\n  insert(value: T) {\n    let { qlNode, dlNode } = this._search(this.mapValueKey(value))\n    const newqlNode = new QuadListNode(value)\n    QuadList.insertAboveAfter(newqlNode, null, qlNode)\n    let belowNode = newqlNode\n    while (Math.random() < 0.5) {\n      const newqlNode = new QuadListNode(value)\n      while (qlNode !== dlNode.val.nil && !qlNode.above) {\n        qlNode = qlNode.prev\n      }\n      if (qlNode === dlNode.val.nil && dlNode.prev === this.dl.nil) {\n        dlNode = this.dl.insert()\n        qlNode = dlNode.val.nil\n      } else {\n        if (!qlNode.above) {\n          throw new Error('qlNode above must not be null')\n        }\n        qlNode = qlNode.above\n        dlNode = dlNode.prev\n      }\n      QuadList.insertAboveAfter(newqlNode, belowNode, qlNode)\n      belowNode = newqlNode\n    }\n  }\n  min() {\n    const tail = this.dl.nil.prev\n    return tail.val.nil.next.val\n  }\n  max() {\n    const tail = this.dl.nil.prev\n    return tail.val.nil.prev.val\n  }\n  remove(key: number) {\n    let { qlNode } = this._search(key)\n    if (this.mapValueKey(qlNode.val) === key) {\n      QuadList.remove(qlNode)\n      while (qlNode.above) {\n        qlNode = qlNode.above\n        QuadList.remove(qlNode)\n      }\n    }\n  }\n}\n","import { sortA, unique } from './array'\ninterface TreeNode {\n  l: number\n  r: number\n  v: any\n}\nabstract class SegmentTree<T> {\n  tree: TreeNode[]\n\n  constructor(\n    protected arr: T[],\n    protected getLeafValue: (v: any) => any,\n    protected getNotLeafValue: (vl: any, vr: any) => any\n  ) {\n    const n = arr.length\n    this.tree = Array(4 * n)\n    this._build(0, 0, n - 1)\n  }\n  protected _build(u: number, l: number, r: number) {\n    if (l === r) {\n      this.tree[u] = {\n        l,\n        r,\n        v: this.getLeafValue(this.arr[l]),\n      }\n      return\n    }\n    let m = Math.floor((l + r) / 2)\n    this._build(2 * u + 1, l, m)\n    this._build(2 * u + 2, m + 1, r)\n    this.tree[u] = {\n      l,\n      r,\n      v: this.getNotLeafValue(this.tree[2 * u + 1].v, this.tree[2 * u + 2].v),\n    }\n  }\n  protected _update(u: number, pos: number, v: T) {\n    const { l, r } = this.tree[u]\n    if (pos < l || pos > r) {\n      return\n    }\n    if (l === r) {\n      if (l === pos) {\n        this.tree[u].v = this.getLeafValue(v)\n      }\n      return\n    }\n    let m = Math.floor((l + r) / 2)\n    if (pos > m) {\n      this._update(2 * u + 2, pos, v)\n    } else {\n      this._update(2 * u + 1, pos, v)\n    }\n    this.tree[u].v = this.getNotLeafValue(\n      this.tree[2 * u + 1].v,\n      this.tree[2 * u + 2].v\n    )\n  }\n  abstract query(start: number, end: number): any\n  // abstract update(pos: number, value: T): void\n}\n\n/**\n * Max segment tree.\n * Query the maximum value of given range and update the value in O(Logn) time.\n *\n * @category segment tree\n * @example\n * ```js\n * const maxArr = new MaxArr([2,3,1,7,9])\n * const [l,r]=[0,2]\n * // find the maximum value from [l,r]\n * maxArr.query(l,r) //=> 3\n * maxArr.query(0,3) //=> 7\n * maxArr.update(1,9)\n * maxArr.query(0,3) //=> 9\n * ```\n * Provide the specified key\n * ```js\n * const maxArr = new MaxArr([{ name: 'li', age: 21 }, { name: 'wang', age: 24 }, { name: 'xx', age: 23 }],node=>node.age)\n * maxArr.query(0,2) //=> { name: 'wang', age: 24 }\n * maxArr.update(0, { name: 'xiao', age: 25 })\n * maxArr.query(0,2) //=> { name: 'xiao', age: 25 }\n * ```\n */\nexport class MaxArr<T> extends SegmentTree<T> {\n  mapValueKey: (node: T) => number\n  constructor(arr: T[], mapValueKey = (x: any) => x) {\n    super(\n      arr,\n      x => x,\n      (x, y) => {\n        return mapValueKey(x) - mapValueKey(y) >= 0 ? x : y\n      }\n    )\n    this.mapValueKey = mapValueKey\n  }\n  private _query(u: number, l: number, r: number): T | undefined {\n    const { l: _l, r: _r, v } = this.tree[u]\n    if (l <= _l && r >= _r) {\n      return v\n    }\n    if (r < _l || l > _r) {\n      return\n    }\n    let v1 = this._query(2 * u + 1, l, r)\n    let v2 = this._query(2 * u + 2, l, r)\n    if (v1 === undefined) {\n      return v2\n    } else if (v2 === undefined) {\n      return v1\n    }\n    return this.getNotLeafValue(v1, v2)\n  }\n  query(start = 0, end = this.arr.length - 1) {\n    return this._query(0, start, end)\n  }\n  update(pos: number, value: T) {\n    this.arr[pos] = value\n    this._update(0, pos, value)\n  }\n}\n\n/**\n * Sum segment tree.\n * Query the sum of given range and update the value in O(Logn) time.\n * @category segment tree\n * @example\n * ```js\n * const sumArr = new SumArr([2,3,1,7,9])\n * sumArr.query(0,2)\n * ```\n */\nexport class SumArr extends SegmentTree<number> {\n  constructor(arr: number[]) {\n    super(\n      arr,\n      x => x,\n      (x, y) => x + y\n    )\n  }\n  private _query(u: number, l: number, r: number): number {\n    const { l: _l, r: _r, v } = this.tree[u]\n    if (l <= _l && r >= _r) {\n      return v\n    }\n    if (r < _l || l > _r) {\n      return 0\n    }\n    let v1 = this._query(2 * u + 1, l, r)\n    let v2 = this._query(2 * u + 2, l, r)\n    return this.getNotLeafValue(v1, v2)\n  }\n  query(start = 0, end = this.arr.length - 1): number {\n    return this._query(0, start, end)\n  }\n  update(pos: number, value: number) {\n    this.arr[pos] = value\n    this._update(0, pos, value)\n  }\n}\n\n/**\n * Given an array contains all the values,\n * insert the value one by one,and\n *  query the number of value in [lower,upper].\n * @category segment tree\n * @example\n * ```js\n * const arr = [1, 2, 3, 5, 7]\n * const vArr = new ValueArr(arr)\n * vArr.insert(1)\n * vArr.insert(3)\n * vArr.insert(5)\n * assert.strictEqual(vArr.query(1, 3), 2)\n * assert.strictEqual(vArr.query(1, 5), 3)\n * vArr.insert(1)\n * assert.strictEqual(vArr.query(1, 5), 4)\n * ```\n */\nexport class ValueArr extends SegmentTree<number> {\n  constructor(arr: number[]) {\n    super(\n      sortA(unique(arr)),\n      () => 0,\n      (x, y) => x + y\n    )\n  }\n  private _query(u: number, low: number, upper: number): number {\n    const { l, r, v } = this.tree[u]\n    const lv = this.arr[l]\n    const rv = this.arr[r]\n    if (low <= lv && upper >= rv) {\n      return v\n    } else if (low > rv || upper < lv) {\n      return 0\n    }\n    return (\n      this._query(2 * u + 1, low, upper) + this._query(2 * u + 2, low, upper)\n    )\n  }\n  query(low: number, upper: number): number {\n    return this._query(0, low, upper)\n  }\n  private _insert(u: number, v: number) {\n    const node = this.tree[u]\n    const { l, r } = node\n    const lv = this.arr[l]\n    const rv = this.arr[r]\n    if (lv <= v && rv >= v) {\n      node.v++\n      if (l < r) {\n        this._insert(2 * u + 1, v)\n        this._insert(2 * u + 2, v)\n      }\n    }\n  }\n  insert(v: number) {\n    this._insert(0, v)\n  }\n}\n","/**\n * @category Union-find data structure\n * @example\n * ```js\n * const uf=new UnionFind(4);\n * uf.union(0, 1);\n * uf.union(1, 2);\n * uf.isSameSet(0, 2); //=> true\n * ```\n */\nexport class UnionFind {\n  size: number\n  fatherMap: number[]\n  sizeMap: number[]\n  /**\n   * @param n the  number of node\n   */\n  constructor(n: number) {\n    this.fatherMap = Array(n).fill(-1)\n    this.sizeMap = Array(n).fill(1)\n    this.size = n\n  }\n  /**\n   * find set representatives use `path compression`\n   * @param node\n   */\n  find(node: number): number {\n    if (this.fatherMap[node] === -1) {\n      return node\n    }\n    this.fatherMap[node] = this.find(this.fatherMap[node])\n    return this.fatherMap[node]\n  }\n  isSameSet(node1: number, node2: number): boolean {\n    const root1 = this.find(node1)\n    const root2 = this.find(node2)\n    return root1 === root2\n  }\n  /**\n   * merge two sets\n   * @param node1\n   * @param node2\n   */\n  union(node1: number, node2: number): void {\n    const root1 = this.find(node1)\n    const root2 = this.find(node2)\n    if (root1 === root2) {\n      return\n    }\n    if (this.sizeMap[root1] > this.sizeMap[root2]) {\n      this.fatherMap[root2] = root1\n      this.sizeMap[root2] = this.sizeMap[root2] + this.sizeMap[root1]\n    } else {\n      this.fatherMap[root1] = root2\n      this.sizeMap[root1] = this.sizeMap[root2] + this.sizeMap[root1]\n    }\n  }\n}\n","// the typescript implementation of Manacher's linear-time algorithm.\n// https://en.wikipedia.org/wiki/Longest_palindromic_substring\n// returns an array representing the longest palindrome substring centered around each location\n\nexport function getPalindromeArr(str: string) {\n  let len = str.length * 2 + 1\n\n  let s: string[] = Array(len).fill('|')\n  for (let i = 0; i < str.length; i++) {\n    s[2 * i + 1] = str[i]\n  }\n  let palindromeRadiusArr = Array(len).fill(0)\n  let center = 0\n  let radius = 0\n  while (center < len) {\n    while (\n      center - (radius + 1) >= 0 &&\n      center + (radius + 1) < len &&\n      s[center - radius - 1] === s[center + radius + 1]\n    ) {\n      radius++\n    }\n    palindromeRadiusArr[center] = radius\n    let oldCenter = center\n    let oldRadius = radius\n    center++\n    while (center <= oldCenter + oldRadius) {\n      let diff = oldCenter + oldRadius - center\n      if (palindromeRadiusArr[oldCenter * 2 - center] === diff) {\n        radius = diff\n        break\n      } else if (palindromeRadiusArr[oldCenter * 2 - center] > diff) {\n        palindromeRadiusArr[center] = oldCenter + oldRadius - center\n        center++\n      } else {\n        palindromeRadiusArr[center] =\n          palindromeRadiusArr[oldCenter * 2 - center]\n        center++\n      }\n    }\n  }\n  let originPalindromeRadiusArr = Array(str.length).fill(0)\n  for (let i = 0; i < originPalindromeRadiusArr.length; i++) {\n    originPalindromeRadiusArr[i] = palindromeRadiusArr[2 * i + 1]\n  }\n  return originPalindromeRadiusArr\n}\n"],"names":["TreeNode","constructor","val","left","right","serialize","root","JSON","stringify","arr","queue","length","node","shift","push","i","serializeArr","outArr","join","deserialize","originData","data","parse","leftVal","undefined","rightVal","deserializeArr","ListNode","next","head","out","header","reverseList","prev","cur","initArray","dimension","Number","isInteger","Array","fill","isArray","Error","len","from","slice","init2Array","m","n","value","mergeArray","intervals","sort","arr1","arr2","result","Math","max","intersect","set","Set","e","has","countOfUniqueD","sortD","t","countOfUniqueA","sortA","reverse","start","end","toIndexArr","indexArr","index","compare","v1","v2","localeCompare","fn","x","fn2","y","key1","key2","r","key3","key4","getCompareKey","getCompareKey2","last","sum","reduce","arg","Infinity","num","min","unique","isNil","hopcroftKarp","adjArr","map","Map","dist","bfs","dfs","shortDis","adjNodes","adjNode","nextNode","get","getConnectedNumByAdjArr","add","getConnectedNumByAdjMatrix","adjMatrix","dfs2","isConnected","j","minCoverVertices","edge","copyArr","splice","forEach","adjVertices","newX","coverVertices","minIntervalCover","v","c","maxIntervalDisjoint","interval","medium","lastValue","floor","ceil","random","nextPermutation","gcd","a","b","rotate90","x0","y0","rotateCw90","bm","BigInt","bn","s","s2","cm","d","bit","bitCount","mod","remainder","postorder","fn1","top","pop","inorder","prevorder","traversalFn","fatherMap","RBSTNode","RBST","mapValueKey","insertAsRoot","item","tree","size","key","split","newNode","leftTree","rightTree","total","_insert","insert","search","curKey","remove","father","p","newTree","findKMax","k","prevNum","leftSize","curRank","PQ","keys","sink","swim","exch","less","peek","poll","isEmpty","MaxPQ","delMax","MinPQ","delMin","DoubleLinkNode","DoubleLink","qlList","QuadList","nil","firstLevel","ql","below","above","QuadListNode","insertAboveAfter","belowNode","leftNode","SkipList","dl","_search","dlNode","qlNode","tail","newqlNode","SegmentTree","getLeafValue","getNotLeafValue","_build","u","l","_update","pos","MaxArr","_query","_l","_r","query","update","SumArr","ValueArr","low","upper","lv","rv","UnionFind","sizeMap","find","isSameSet","node1","node2","root1","root2","union","getPalindromeArr","str","palindromeRadiusArr","center","radius","oldCenter","oldRadius","diff","originPalindromeRadiusArr"],"mappings":"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"}