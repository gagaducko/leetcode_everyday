declare type GetCompareKey<T> = (a: T) => number;
declare class PQ<T> {
    keys: T[];
    mapValueKey: GetCompareKey<T>;
    constructor(keys?: T[], fn?: GetCompareKey<T>);
    insert(key: T): void;
    protected exch(i: number, j: number): void;
    protected less(i: number, j: number): boolean;
    protected swim(index: number): void;
    protected sink(index: number): void;
    protected peek(): T;
    protected poll(): T;
    isEmpty(): boolean;
    size(): number;
}
/**
 * @category priority queue
 * @example
 * ```js
 * const input =  [4, 3, 1]
 * const maxP = new MaxPQ(input)
 * maxP.max() //=> 4
 * maxP.insert(5)
 * maxP.max() //=> 5
 * maxP.insert(8)
 * maxP.max() //=> 8
 * maxP.delMax()
 * maxP.max() //=> 5
 * ```
 * Provide the specified key
 * ```js
 * const input = [{ name: 'xiao', age: 21 }, { name: 'wang', age: 22 }, { name: 'li', age: 25 }]
 * const maxP = new MaxPQ(input, v => v.age)
 * const m = maxP.max() //=> { name: 'li', age: 25 }
 * ```
 *
 */
export declare class MaxPQ<T> extends PQ<T> {
    max(): T;
    delMax(): T;
}
/**
 * @category priority queue
 * @example
 * ```js
 * const minPQ = new MinPQ([5, 1, 4, 2])
 * minPQ.min() // => 1
 * minPQ.delMin()
 * minPQ.min() // => 2
 * ```
 * Provide the specified key
 * ```js
 * const input = [{ name: 'xiao', age: 21 }, { name: 'wang', age: 22 }, { name: 'li', age: 25 }]
 * const minP = new MinPQ(input, v => v.age)
 * minP.min() // => { name: 'xiao', age: 21 }
 * ```
 */
export declare class MinPQ<T> extends PQ<T> {
    constructor(keys?: T[], fn?: GetCompareKey<T>);
    min(): T;
    delMin(): T;
}
export {};
